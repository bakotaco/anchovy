#!/bin/sh

# exit when uninitialised variables encountered
set -u
# exit upon error
set -e

error () {
    printf "${1}\n" >&2
}

# check for migrations subdirectory in current directory
if [ ! -d "migrations" ]; then
    error "ERROR: Directory 'migrations' not found.\nDid you initialize migrations for this project?"
    exit 1
fi

# check for configuration file named 'config' in migrations directory
if [ ! -f "migrations/config" ]; then
    error "ERROR: Configuration 'migrations/config' not found."
    error "Please add the configuration file named 'config' to the migrations directory"
    exit 1
fi

# TODO: hmm, is there a better way to read configs in bash? when there is
# something wrong in the config file (syntax error perhaps) that can lead to
# the anchovy script crashing...
. migrations/config

# check for required configuration settings
if [ -z "${db_host:-}" ]; then
    error "ERROR: Missing required configuration setting 'db_host' in 'migrations/config'."
    error "Please specify the hostname anchovy should connect to in the config file"
    exit 1
fi
if [ -z "${db_user:-}" ]; then
    error "ERROR: Missing required configuration setting 'db_user' in 'migrations/config'."
    error "Please specify the user anchovy should use to connect to the database in the config file"
    exit 1
fi
if [ -z "${db_password:-}" ]; then
    error "ERROR: Missing required configuration setting 'db_password' in 'migrations/config'."
    error "Please specify the password anchovy should use to connect to the database in the config file"
    exit 1
fi
if [ -z "${db_name:-}" ]; then
    error "ERROR: Missing required configuration setting 'db_name' in 'migrations/config'."
    error "Please specify the database name anchovy should connect to in the config file"
    exit 1
fi

MYSQL_COMMAND="mysql --host=$db_host --user=$db_user --password=$db_password --database=$db_name"

execute_migration () {
    file=$1
    set +e
    $MYSQL_COMMAND < "$file" 2>&1
    exit_code=$?
    set -e
    # catch MySQL error
    return $exit_code
}

run_mysql_query () {
    sql=$1
    # NOTE: quoting $sql in the line below breaks things, however is it currently properly quoted?
    set +e
    mysql_out=$(echo "$sql" | $MYSQL_COMMAND 2>&1)
    exit_code=$?
    set -e
    # catch MySQL error
    if [ $exit_code != 0 ]; then
        # attempt to convert the errors given by MySQL to errors which
        # provide the user context
        if echo $mysql_out | grep "^ERROR 2005 (HY000): Unknown MySQL server host '$db_host' ([0-9][0-9]*)$" >/dev/null; then
            error "ERROR: Cannot connect to host '$db_host'."
            error "Is the host specified in the configuration file up and reachable?"
        elif echo $mysql_out | grep -E "^ERROR 1045 \(28000\): Access denied for user '$db_user'@'$db_host' \(using password: (YES|NO)\)" >/dev/null; then
            error "ERROR: Access denied for database user '$db_user'."
            error "Are the username '$db_user' and password specified in the configuration correct?"
        elif echo $mysql_out | grep "^ERROR 1044 (42000): Access denied for user '$db_user'@'$db_host' to database '$db_name'" >/dev/null; then
            error "ERROR: Access denied to database with name '$db_name'."
            error "Is the database name specified in the configuration file correct?"
            error "Does the specified database exist?"
            error "Does the specified user have access privileges to the specified database?"
        else
            error "ERROR: the database returned the following error:"
            error "$mysql_out"
        fi
        exit 1
    fi
    echo "$mysql_out"
}

# verify database connection
run_mysql_query "" >/dev/null

# check for migrations table
printf "* checking for migration tables                      "
out=$(run_mysql_query "SHOW TABLES like 'migrations'")
if [ -z "$out" ]; then
    # migrations table does not exist, create it
    printf "[MISSING]\n"

    # make sure the database is empty
    if [ -n "$(run_mysql_query 'SHOW TABLES')" ]; then
        error "ERROR: database is not empty, will only initialize in an empty database."
        exit 1
    fi

    printf "\055 creating migration tables                          "
    run_mysql_query "CREATE TABLE migrations (id INT UNSIGNED NOT NULL UNIQUE, md5 CHAR(32) NOT NULL)" >/dev/null
    echo "[OK]"
else
    echo "[OK]"
fi

MIGRATION_PATTERN="^[0-9][0-9]*.*\.sql$"

# check for invalid files in migrations dir
invalid_files=$(ls migrations | grep -v $MIGRATION_PATTERN | grep -v config || true)
if [ -n "$invalid_files" ]; then
    error "ERROR: found files in migrations/ directory which do not start with a positive number and/or have a '.sql' file extension"
    echo "$invalid_files" | sed 's,^,- migrations/,'
    exit 1
fi

function filter_migration_ids () {
    # NOTE: here we also strip any potential leading zeroes, except when
    # it's the last number
    sed -n 's,^0*\([0-9][0-9]*\).*.sql$,\1,p'
}

migrations=$(ls migrations | grep -v config | sort -n)
migration_ids=$(echo "$migrations" | filter_migration_ids)

# error and exit when there are duplicate migrations
duplicate_migration_ids=$(echo "$migration_ids" | uniq -c | awk '$1 > 1 { print $2 }')
if [ -n "$duplicate_migration_ids" ]; then
    error "ERROR: found migrations with duplicate numbers:"
    for migration in $migrations; do
        migration_id=$(echo "$migration" | filter_migration_ids)
        if echo "$duplicate_migration_ids" | grep "^$migration_id$" >/dev/null; then
            error "\055 migrations/$migration"
        fi
    done
    exit 1
fi

# note that 'tail +2' skips the mysql header (first line of output)
executed_migrations=$(run_mysql_query "SELECT id, md5 FROM migrations ORDER BY id" | tail +2)
executed_migration_ids=$(echo "$executed_migrations" | awk '{ print $1 }')
# here $((..)) will make the number numeric, stripping any leading zeroes
executed_max_id=$(($(echo "$executed_migration_ids" | tail -1)))

# actually execute the migrations
echo "* executing migrations"
for migration in $migrations; do
    # execute migration
    migration_id=$(echo "$migration" | filter_migration_ids)
    md5=$(md5 < "migrations/$migration")

    if echo "$executed_migration_ids" | grep "^$migration_id$" >/dev/null; then
        # verify that the executed migration has not changed
        if echo "$executed_migrations" | grep "$md5" >/dev/null; then
            printf "\055 already executed migrations/${migration}\n"
        else
            error "ERROR: found already executed migration which has been altered since executing it:"
            error "\055 migrations/$migration"
            exit 1
        fi
    else
        # error when previously executed migration id is higher than the current one
        if [ $migration_id -le $executed_max_id ]; then
            error "ERROR: migrations/$migration has not been executed, but a higher migration with id $executed_max_id has already been executed"
            exit 1
        fi

        if ! mysql_out=$(execute_migration "migrations/$migration"); then
            # note that \055 is the '-' character; as it's the first character
            # in the string, using the ascii code here prevents printf from
            # interpreting the string as an option
            printf "\055 %-50s %s\n" "executing migrations/$migration" "[ERROR]"
            error "ERROR: Executing migration migrations/$migration failed, the database returned:"
            error "$mysql_out"
            exit 1
        else
            # note that \055 is the '-' character; as it's the first character
            # in the string, using the ascii code here prevents printf from
            # interpreting the string as an option
            printf "\055 %-50s %s\n" "executing migrations/$migration" "[OK]"
            run_mysql_query "INSERT INTO migrations SET id = '$migration_id', md5 = '$md5'" >/dev/null
        fi
    fi
done

echo "Anchovy ran successfully."
exit 0
