#!/bin/sh

error () {
    echo "$*" 1>&2
}

# check for migrations subdirectory in current directory
if [ ! -d "migrations" ]; then
    error "ERROR: Directory 'migrations' not found.\nDid you initialize migrations for this project?"
    exit 1
fi

# check for configuration file named 'config' in migrations directory
if [ ! -f "migrations/config" ]; then
    error "ERROR: Configuration 'migrations/config' not found."
    error "Please add the configuration file named 'config' to the migrations directory"
    exit 1
fi

# TODO: hmm, is there a better way to read configs in bash? when there is
# something wrong in the config file (syntax error perhaps) that can lead to
# the migrate script crashing...
. migrations/config

# check for required configuration settings
if [ -z "$db_host" ]; then
    error "ERROR: Missing required configuration setting 'db_host' in 'migrations/config'."
    error "Please specify the hostname migrate should connect to in the config file"
    exit 1
fi
if [ -z "$db_user" ]; then
    error "ERROR: Missing required configuration setting 'db_user' in 'migrations/config'."
    error "Please specify the user migrate should use to connect to the database in the config file"
    exit 1
fi
if [ -z "$db_password" ]; then
    error "ERROR: Missing required configuration setting 'db_password' in 'migrations/config'."
    error "Please specify the password migrate should use to connect to the database in the config file"
    exit 1
fi
if [ -z "$db_name" ]; then
    error "ERROR: Missing required configuration setting 'db_name' in 'migrations/config'."
    error "Please specify the database name migrate should connect to in the config file"
    exit 1
fi

catch_mysql_error() {
    if [ $? != 0 ]; then
        # attempt to convert the errors given by MySQL to errors which
        # provide the user context
        if echo $mysql_out | grep "^ERROR 2005 (HY000): Unknown MySQL server host '$db_host' (0)$" >/dev/null; then
            error "ERROR: Cannot connect to host '$db_host'."
            error "Is the host specified in the configuration file up and reachable?"
        elif echo $mysql_out | grep "^ERROR 1045 (28000): Access denied for user '$db_user'@'$db_host' (using password: NO)" >/dev/null; then
            error "ERROR: Access denied for database user '$db_user'."
            error "Is the username '$db_user' specified in the configuration correct?"
        elif echo $mysql_out | grep "^ERROR 1045 (28000): Access denied for user '$db_user'@'$db_host' (using password: YES)" >/dev/null; then
            error "ERROR: Access denied for user '$db_user'."
            error "Is the password specified in the configuration file correct?"
        elif echo $mysql_out | grep "^ERROR 1044 (42000): Access denied for user '$db_user'@'$db_host' to database '$db_name'" >/dev/null; then
            error "ERROR: Access denied to database with name '$db_name'."
            error "Is the database name specified in the configuration file correct?"
            error "Does the specified database exist?"
            error "Does the specified user have access privileges to the specified database?"
        else
            error "ERROR: the database returned the following error:"
            error "$mysql_out"
        fi
        exit 1
    fi
}

MYSQL_COMMAND="mysql --host=$db_host --user=$db_user --password=$db_password --database=$db_name"

run_mysql_file () {
    file=$1
    if [ ! -r "$file" ]; then
        error "Cannot execute '$file', because it is not found"
        exit 1
    fi
    mysql_out=$($MYSQL_COMMAND < $file 2>&1)
    catch_mysql_error
    echo "$mysql_out"
}

run_mysql_query () {
    sql=$1
    mysql_out=$(echo "$sql" | $MYSQL_COMMAND 2>&1)
    catch_mysql_error
    echo "$mysql_out"
}

# verify database connection
run_mysql_file /dev/null >/dev/null

# check for migrations table
echo "* checking for migration tables \c"
out=$(run_mysql_query "SHOW TABLES like 'migrations'")
if [ "z$out" = "z" ]; then
    # migrations table does not exist, create it
    echo "[MISSING]"

    # make sure the database is empty
    tables=
    if [ -n "$(run_mysql_query 'SHOW TABLES')" ]; then
        error "ERROR: database is not empty, will only initialize in an empty database."
        exit 1
    fi

    echo "- creating migration tables \c"
    run_mysql_query "CREATE TABLE migrations (id INT UNIQUE)" >/dev/null
    echo "[OK]"
else
    echo "[OK]"
fi

MIGRATION_PATTERN="^[0-9][0-9]*.*\.sql$"

# check for invalid files in migrations dir
invalid_files=$(ls migrations | grep -v $MIGRATION_PATTERN | grep -v config)
if [ -n "$invalid_files" ]; then
    error "ERROR: found files in migrations/ directory which do not start with a number and/or have a '.sql' file extension"
    echo "$invalid_files" | sed 's,^,- migrations/,'
    exit 1
fi

function filter_migration_ids () {
    # NOTE: here we also strip any potential leading zeroes, except when
    # it's the last number
    sed -n 's,^0*\([0-9][0-9]*\).*.sql$,\1,p'
}

migrations=$(ls migrations | grep -v config | sort -n)
migration_ids=$(echo "$migrations" | filter_migration_ids)
duplicate_migration_ids=$(echo "$migration_ids" | uniq -c | awk '$1 > 1 { print $2 }')
if [ -n "$duplicate_migration_ids" ]; then
    error "ERROR: found migrations with duplicate numbers:"
    for migration in $migrations; do
        migration_id=$(echo "$migration" | filter_migration_ids)
        if echo "$duplicate_migration_ids" | grep "^$migration_id$" >/dev/null; then
            error "- migrations/$migration"
        fi
    done
    exit 1
fi

# NOTE: tail +2 skips the mysql header (first line of output)
executed_migrations=$(run_mysql_query "SELECT id FROM migrations ORDER BY id" | tail +2)
# here $((..)) will make the number numeric, stripping any leading zeroes
executed_max_id=$(($(echo "$executed_migrations" | tail -1)))

# actually execute the migrations
echo "* executing migrations"
for migration in $migrations; do
    # execute migration
    migration_id=$(echo "$migration" | filter_migration_ids)

    if echo "$executed_migrations" | grep "^$migration_id$" >/dev/null; then
        echo "- already executed migrations/$migration"
    else
        # error when previously executed migration id is higher than the current one
        if [ ! $migration_id -gt $executed_max_id ]; then
            error "ERROR: migrations/$migration has not been executed, but a higher migration with id $executed_max_id has already been executed"
            exit 1
        fi

        echo "- executing migrations/$migration"
        run_mysql_file "migrations/$migration" >/dev/null
        run_mysql_query "INSERT INTO migrations SET id = '$migration_id'" >/dev/null
    fi
done

echo "Migrate ran successfully."
exit 0
